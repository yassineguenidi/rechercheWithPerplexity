import streamlit as st
import requests
import os
from dotenv import load_dotenv

# ---------------------------
# Charger les cl√©s API
# ---------------------------
load_dotenv()
SERPER_API_KEY = os.getenv("SERPER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")


# ---------------------------
# Fonction : recherche Google via Serper
# ---------------------------
def google_search(query, num_results=10):
    url = "https://google.serper.dev/search"
    headers = {"X-API-KEY": SERPER_API_KEY, "Content-Type": "application/json"}
    payload = {"q": query, "num": num_results}
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            return response.json().get("organic", [])
        else:
            st.error(f"Erreur Serper API: {response.status_code} - {response.text}")
            return []
    except Exception as e:
        st.error(f"Erreur lors de la recherche Serper: {str(e)}")
        return []


# ---------------------------
# Fonction : g√©n√©ration de r√©ponse avec Groq API (GRATUIT)
# ---------------------------
def generate_answer_groq(context, question):
    if not GROQ_API_KEY:
        return "‚ùå Erreur : Cl√© Groq API manquante. Ajoutez GROQ_API_KEY dans vos secrets Streamlit."

    try:
        url = "https://api.groq.com/openai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        }

        # Construction du prompt optimis√©
        system_prompt = """Tu es un assistant IA expert. R√©ponds aux questions en utilisant UNIQUEMENT les informations du contexte fourni. 
        Sois pr√©cis, concis et factuel. R√©ponds en fran√ßais. Si le contexte ne contient pas la r√©ponse, dis-le honn√™tement."""

        user_prompt = f"""CONTEXTE (sources web):
{context}

QUESTION: {question}

INSTRUCTIONS:
- R√©ponds exclusivement en fran√ßais
- Utilise uniquement les informations du contexte fourni
- Sois clair, structur√© et concis (max 3 paragraphes)
- Si le contexte est insuffisant, mentionne-le

R√âPONSE:"""

        payload = {
            "model": "llama3-70b-8192",  # Mod√®le gratuit et tr√®s rapide
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            "max_tokens": 1500,
            "temperature": 0.7,
            "stream": False
        }

        response = requests.post(url, headers=headers, json=payload, timeout=60)

        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content']
        else:
            # Fallback: utiliser un mod√®le alternatif si le premier √©choue
            return generate_answer_groq_fallback(context, question, GROQ_API_KEY)

    except Exception as e:
        return f"‚ùå Erreur technique: {str(e)}"


# Fallback avec un autre mod√®le Groq
def generate_answer_groq_fallback(context, question, api_key):
    try:
        url = "https://api.groq.com/openai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        user_prompt = f"Contexte: {context}\n\nQuestion: {question}\n\nR√©ponds en fran√ßais:"

        payload = {
            # "model": "mixtral-8x7b-32768",
            "model": "llama-3.3-70b-versatile", # Mod√®le alternatif
            "messages": [{"role": "user", "content": user_prompt}],
            "max_tokens": 1000,
            "temperature": 0.7
        }

        response = requests.post(url, headers=headers, json=payload, timeout=60)

        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content']
        else:
            return f"‚ùå Erreur Groq API: {response.status_code} - {response.text}"

    except Exception as e:
        return f"‚ùå Erreur fallback: {str(e)}"


# ---------------------------
# Interface Streamlit
# ---------------------------
st.set_page_config(
    page_title="AI Research Assistant - Groq",
    layout="wide",
    page_icon="üîç"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stButton button {
        width: 100%;
        background-color: #1E88E5;
        color: white;
        font-weight: bold;
    }
    .source-box {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #1E88E5;
        margin-bottom: 10px;
    }
    .answer-box {
        background-color: #e8f5e8;
        padding: 20px;
        border-radius: 10px;
        border-left: 4px solid #4CAF50;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown('<h1 class="main-header">üîç AI Research Assistant</h1>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">Powered by Google Serper + Groq AI (Llama 3)</p>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configuration")
    st.info("Recherche web intelligente avec analyse IA")

    # V√©rification des cl√©s API
    if not SERPER_API_KEY:
        st.error("‚ùå Cl√© Serper API manquante")
    else:
        st.success("‚úÖ Cl√© Serper API configur√©e")

    if not GROQ_API_KEY:
        st.error("‚ùå Cl√© Groq API manquante")
    else:
        st.success("‚úÖ Cl√© Groq API configur√©e")

    st.divider()
    st.markdown("### üîß Param√®tres")
    num_results = st.slider("Nombre de r√©sultats", 3, 15, 8)

    st.divider()
    st.markdown("### üìä Statut API")
    st.info("Groq API: Gratuit et rapide")
    st.info("Serper API: 1000 req/mois gratuit")

# Recherche principale
col1, col2 = st.columns([3, 1])
with col1:
    query = st.text_input(
        "**üéØ Pose ta question :**",
        placeholder="Ex: Quelles sont les derni√®res avanc√©es en intelligence artificielle en 2024?",
        help="Pose une question sur n'importe quel sujet"
    )
with col2:
    st.markdown("<br>", unsafe_allow_html=True)
    search_clicked = st.button("üöÄ Rechercher et Analyser", type="primary")

if search_clicked and query:
    with st.spinner("üîé Recherche en cours..."):
        # 1Ô∏è‚É£ Recherche via Serper
        results = google_search(query, num_results)

        if results:
            # Afficher les sources
            st.subheader("üìö Sources trouv√©es")
            context_parts = []

            for i, result in enumerate(results, 1):
                with st.expander(f"üìñ {result['title']}", expanded=False):
                    st.markdown(f"**üîó URL:** [{result['link']}]({result['link']})")
                    st.markdown(f"**üìù Extrait:** {result['snippet']}")
                    context_parts.append(f"SOURCE {i}: {result['title']}\n{result['snippet']}\n")

            context = "\n".join(context_parts)

            # 2Ô∏è‚É£ G√©n√©ration de la r√©ponse avec Groq
            with st.spinner("ü§ñ Analyse des r√©sultats avec Groq AI..."):
                answer = generate_answer_groq(context, query)

                st.subheader("üí° R√©ponse Intelligente")
                st.markdown('<div class="answer-box">', unsafe_allow_html=True)
                st.markdown(answer)
                st.markdown('</div>', unsafe_allow_html=True)

            # Section feedback
            st.divider()
            # st.markdown("### üìä Feedback")
            # col_f1, col_f2, col_f3 = st.columns(3)
            # with col_f1:
            #     if st.button("üëç Excellent", use_container_width=True):
            #         st.success("Merci pour votre feedback !")
            # with col_f2:
            #     if st.button("üòê Moyen", use_container_width=True):
            #         st.info("Nous am√©liorons continuellement !")
            # with col_f3:
            #     if st.button("üëé Insatisfait", use_container_width=True):
            #         st.warning("D√©sol√©, nous ferons mieux !")

        else:
            st.error("‚ùå Aucun r√©sultat trouv√©. V√©rifiez votre cl√© Serper API.")

# Section d'instructions
# with st.expander("üìã Guide d'installation - GROQ GRATUIT", expanded=True):
#     st.markdown("""
#     ## üöÄ Configuration GRATUITE - Groq API
#
#     ### 1. Obtenir Groq API Key (GRATUIT)
#
#     **üëâ [https://console.groq.com](https://console.groq.com)**
#
#     - ‚úÖ Completement gratuit
#     - ‚úÖ Tr√®s rapide (mod√®les Llama 3)
#     - ‚úÖ 1000+ requ√™tes gratuites
#     - ‚úÖ Pas de carte de cr√©dit requise
#
#     **Steps:**
#     1. Allez sur [console.groq.com](https://console.groq.com)
#     2. Connectez-vous avec Google/GitHub
#     3. Allez dans "API Keys"
#     4. Cliquez "Create API Key"
#     5. Copiez la cl√© g√©n√©r√©e
#
#     ### 2. Serper API (GRATUIT)
#
#     **üëâ [https://serper.dev](https://serper.dev)**
#
#     - 1000 requ√™tes/mois gratuit
#     - Cl√© instantan√©e apr√®s inscription
#
#     ### 3. D√©ploiement Streamlit Cloud
#
#     **Secrets:**
#     ```toml
#     SERPER_API_KEY = "votre_cle_serper"
#     GROQ_API_KEY = "votre_cle_groq"
#     ```
#
#     **requirements.txt:**
#     ```txt
#     streamlit
#     requests
#     python-dotenv
#     ```
#     """)

# Footer
st.divider()
st.markdown("""
<div style="text-align: center; color: #666; font-size: 0.9rem;">
    <p>‚ú® D√©velopp√© avec Streamlit | üîç Serper API | ü§ñ Groq AI (Llama 3)</p>
    <p>üöÄ 100% Gratuit et Open Source</p>
    <p> d√©velopp√© par GUENIDI Yassine</p>
</div>
""", unsafe_allow_html=True)